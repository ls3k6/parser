#lang racket

(define-namespace-anchor a)
(define-syntax-class id)
(define-syntax-class idx)
(define-syntax-class etail)
(define-syntax-class expr)
(define-syntax-class line)
(define-syntax-class num)
(define-syntax-class stmt)
(define ns (namespace-anchor->namespace a))
(begin-for-syntax
  (define (make-regexp str)
    (regexp (string-append "^" str))))
(define-syntax-rule (nonterm nt body ...)
  (begin
    (define-syntax nt (datum->syntax ns 'nt))
    (define nt (syntax-case nt ()
                ((_ a ...) #'(or a ...))))
    body ...))
(define-syntax-rule (term nt str)
  (define-syntax nt (datum->syntax ns 'nt))
  (define nt (make-regexp str)))
(nonterm line
  (idx stmt (linetail ...)))
(nonterm linelist
  ((line ...) | epsilon))
(nonterm idx
  (nonzero_digit (digit ...) ))
(nonterm linetail
  (: stmt | epsilon))
(nonterm stmt
  ((id = expr) |
   (if expr then stmt) |
   (read id) |
   (write expr) |
   (goto idx) |
   (gosub idx) |
   (return)))
(nonterm expr
  ((id etail ...) |
   (num etail ...) |
   (( expr ) etail ...)))
(nonterm etail
  ((+ expr) |
   (- expr) |
   (= expr) |
   epsilon))
(term id "[a-zA-Z]+")
(nonterm num
  ((numsign (digit digit ...) ) |
   (digit digit ...)))
(term numsign "[+-]?")
(term nonzero_digit "[1-9]")
(term digit "[0-9]")
(term EOL "\n")
(define (parse-file file)
  (call-with-input-file file
    (lambda (in)
      (let loop ((line 1)
                 (parse-result "Accept")
                 (pending-line '())
                 (remaining-lines (read-lines in)))
(define (read-lines in)
  (let loop ((lines '())
             (str (read-line in)))
    (cond
      ((eof-object? str) (reverse lines))
